{
  "Redux Slice": {
    "prefix": "rd:slice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit';",
      "",
      "const ${1:counterSlice} = createSlice({",
      "  name: '${2:counter}',",
      "  initialState: {",
      "    ${3:value}: ${4:0},",
      "  },",
      "  reducers: {",
      "    ${5:increment}: (state) => {",
      "      state.${3:value} += 1;",
      "    },",
      "    ${6:decrement}: (state) => {",
      "      state.${3:value} -= 1;",
      "    },",
      "  },",
      "});",
      "",
      "export const { ${5:increment}, ${6:decrement} } = ${1:counterSlice}.actions;",
      "export default ${1:counterSlice}.reducer;"
    ],
    "description": "Tạo slice Redux với createSlice"
  },
  "Redux Async Thunk": {
    "prefix": "rd:thunk",
    "body": [
      "import { createAsyncThunk } from '@reduxjs/toolkit';",
      "",
      "export const ${1:fetchData} = createAsyncThunk(",
      "  '${2:sliceName}/fetchData',",
      "  async (${3:params}, thunkAPI) => {",
      "    try {",
      "      const response = await fetch('${4:https://api.example.com/data}');",
      "      const data = await response.json();",
      "      return data;",
      "    } catch (error) {",
      "      return thunkAPI.rejectWithValue(error.message);",
      "    }",
      "  }",
      ");"
    ],
    "description": "Tạo async thunk để gọi API bất đồng bộ trong Redux"
  },
  "Redux Slice with Thunk": {
    "prefix": "rd:slice-thunk",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit';",
      "import { ${1:fetchData} } from './${2:thunkFile}';",
      "",
      "const ${3:sliceName}Slice = createSlice({",
      "  name: '${3:sliceName}',",
      "  initialState: {",
      "    data: [],",
      "    loading: false,",
      "    error: null",
      "  },",
      "  reducers: {},",
      "  extraReducers: (builder) => {",
      "    builder",
      "      .addCase(${1:fetchData}.pending, (state) => {",
      "        state.loading = true;",
      "        state.error = null;",
      "      })",
      "      .addCase(${1:fetchData}.fulfilled, (state, action) => {",
      "        state.loading = false;",
      "        state.data = action.payload;",
      "      })",
      "      .addCase(${1:fetchData}.rejected, (state, action) => {",
      "        state.loading = false;",
      "        state.error = action.payload;",
      "      });",
      "  }",
      "});",
      "",
      "export default ${3:sliceName}Slice.reducer;"
    ],
    "description": "Tạo slice Redux có tích hợp xử lý thunk (extraReducers)"
  },
  "Redux Store Config": {
    "prefix": "rd:store-basic",
    "body": [
      "import { configureStore } from '@reduxjs/toolkit';",
      "import ${1:sliceReducer} from './${2:sliceFile}';",
      "",
      "const store = configureStore({",
      "  reducer: {",
      "    ${3:sliceKey}: ${1:sliceReducer}",
      "  }",
      "});",
      "",
      "export default store;"
    ],
    "description": "Cấu hình Redux store với một slice reducer"
  },
  "Redux useSelector & useDispatch": {
    "prefix": "use-dispatch-action",
    "body": [
      "import { useSelector, useDispatch } from 'react-redux';",
      "import { ${1:actionName} } from './${2:sliceFile}';",
      "",
      "function ${3:ConnectedComponent}() {",
      "  const ${4:data} = useSelector(state => state.${5:sliceKey}.${4:data});",
      "  const dispatch = useDispatch();",
      "",
      "  const handleClick = () => {",
      "    dispatch(${1:actionName}(${6:payload}));",
      "  };",
      "",
      "  return (",
      "    <div>",
      "      <p>Dữ liệu: {JSON.stringify(${4:data})}</p>",
      "      <button onClick={handleClick}>Gửi Action</button>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default ${3:ConnectedComponent};"
    ],
    "description": "Dùng useSelector & useDispatch trong component React để kết nối Redux"
  },
  "React Redux Component": {
    "prefix": "rd:use-store-effect",
    "body": [
      "import { useSelector, useDispatch } from 'react-redux';",
      "import { useEffect } from 'react';",
      "import { ${1:fetchData} } from './${2:thunkFile}';",
      "",
      "function ${3:MyComponent}() {",
      "  const dispatch = useDispatch();",
      "",
      "  const { ${4:data}, loading, error } = useSelector((state) => state.${5:sliceName});",
      "",
      "  useEffect(() => {",
      "    dispatch(${1:fetchData}());",
      "  }, [dispatch]);",
      "",
      "  if (loading) return <p>Đang tải dữ liệu...</p>;",
      "  if (error) return <p>Lỗi: {error}</p>;",
      "",
      "  return (",
      "    <div>",
      "      <pre>{JSON.stringify(${4:data}, null, 2)}</pre>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default ${3:MyComponent};"
    ],
    "description": "React component sử dụng useSelector và useDispatch để tương tác Redux store"
  },
  "Redux Middleware Logger": {
    "prefix": "rd:logger",
    "body": [
      "const logger = (store) => (next) => (action) => {",
      "  console.group(action.type);",
      "  console.log('Prev State:', store.getState());",
      "  console.log('Action:', action);",
      "  const result = next(action);",
      "  console.log('Next State:', store.getState());",
      "  console.groupEnd();",
      "  return result;",
      "};",
      "",
      "export default logger;"
    ],
    "description": "Tạo Redux middleware để log action và state"
  },
  "Redux Store": {
    "prefix": "rd:store-logger",
    "body": [
      "import { configureStore } from '@reduxjs/toolkit';",
      "import thunk from 'redux-thunk';",
      "import logger from './middleware/logger';",
      "import ${1:counterReducer} from './features/${2:counter}/counterSlice';",
      "",
      "const store = configureStore({",
      "  reducer: {",
      "    ${2:counter}: ${1:counterReducer},",
      "  },",
      "  middleware: (getDefaultMiddleware) =>",
      "    getDefaultMiddleware().concat(thunk, logger),",
      "});",
      "",
      "export default store;"
    ],
    "description": "Tạo Redux store với reducer, middleware (thunk + logger)"
  },
  "Redux Selector": {
    "prefix": "rd:selector",
    "body": [
      "// ${1:sliceName}Selectors.js",
      "export const select${2:CapitalSliceKey} = (state) => state.${3:sliceKey};",
      "export const select${2:CapitalSliceKey}Data = (state) => state.${3:sliceKey}.${4:data};",
      "export const select${2:CapitalSliceKey}Loading = (state) => state.${3:sliceKey}.loading;",
      "export const select${2:CapitalSliceKey}Error = (state) => state.${3:sliceKey}.error;"
    ],
    "description": "Tạo file selector để truy cập state từ slice Redux"
  },
  "Redux Hook - useAppDispatch": {
    "prefix": "rd:hooks-dispatch",
    "body": [
      "// hooks/useAppDispatch.js",
      "import { useDispatch } from 'react-redux';",
      "",
      "// Nếu dùng TypeScript, bạn có thể thêm kiểu: useDispatch<AppDispatch>()",
      "const useAppDispatch = () => useDispatch();",
      "",
      "export default useAppDispatch;"
    ],
    "description": "Tạo custom hook useAppDispatch để dùng thay useDispatch() trong Redux"
  },
  "Redux Hook - useAppSelector": {
    "prefix": "rd:hooks-selector",
    "body": [
      "// hooks/useAppSelector.js",
      "import { useSelector } from 'react-redux';",
      "",
      "// Nếu dùng TypeScript, có thể dùng: TypedUseSelectorHook<RootState>",
      "const useAppSelector = useSelector;",
      "",
      "export default useAppSelector;"
    ],
    "description": "Tạo custom hook useAppSelector để dùng thay useSelector() trong Redux"
  },
  "Redux Slice - Reset State": {
    "prefix": "rd:slice-reset",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit';",
      "",
      "const initialState = {",
      "  data: null,",
      "  loading: false,",
      "  error: null",
      "};",
      "",
      "const ${1:sliceName}Slice = createSlice({",
      "  name: '${1:sliceName}',",
      "  initialState,",
      "  reducers: {",
      "    resetState: () => initialState",
      "  },",
      "  extraReducers: (builder) => {",
      "    // thêm xử lý async thunk nếu cần",
      "  }",
      "});",
      "",
      "export const { resetState } = ${1:sliceName}Slice.actions;",
      "export default ${1:sliceName}Slice.reducer;"
    ],
    "description": "Thêm reducer resetState để đưa slice Redux về trạng thái ban đầu"
  }
}
