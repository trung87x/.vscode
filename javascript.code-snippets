{
  "Console Log (label + var)": {
    "prefix": "off:log",
    "body": ["console.log('${1:label}:', ${2:value});"],
    "description": "console.log kèm nhãn"
  },
  "Console Warn": {
    "prefix": "off:warn",
    "body": ["console.warn(${1:message});"],
    "description": "console.warn"
  },
  "Console Error": {
    "prefix": "off:error",
    "body": ["console.error(${1:error});"],
    "description": "console.error"
  },
  "Console Table": {
    "prefix": "off:table",
    "body": ["console.table(${1:data});"],
    "description": "console.table"
  },
  "Console Time": {
    "prefix": "off:time",
    "body": [
      "console.time('${1:label}');",
      "${2:// code here}",
      "console.timeEnd('${1:label}');"
    ],
    "description": "Đo thời gian thực thi"
  },
  "Console Group": {
    "prefix": "off:group",
    "body": [
      "console.groupCollapsed('${1:label}');",
      "${2:// code here}",
      "console.groupEnd();"
    ],
    "description": "Nhóm log gọn gàng"
  },
  "Console Assert": {
    "prefix": "off:assert",
    "body": ["console.assert(${1:condition}, '${2:message}', ${3:context});"],
    "description": "Log khi điều kiện sai"
  },

  "JavaScript Function (JSDoc)": {
    "prefix": "off:function",
    "body": [
      "/**",
      " * ${1:description}",
      " * @param {${2:any}} ${3:param} ${4:desc}",
      " * @returns {${5:any}}",
      " */",
      "function ${6:functionName}(${3:param}) {",
      "  ${7:// code here}",
      "}"
    ],
    "description": "function + JSDoc"
  },
  "JavaScript Async Function": {
    "prefix": "off:async-fn",
    "body": [
      "async function ${1:functionName}(${2:params}) {",
      "  try {",
      "    ${3:// await ...}",
      "  } catch (${4:err}) {",
      "    console.error(${4:err});",
      "    throw ${4:err};",
      "  }",
      "}"
    ],
    "description": "function async + try/catch"
  },
  "JavaScript Arrow Function": {
    "prefix": "off:arrow",
    "body": [
      "const ${1:functionName} = (${2:params}) => {",
      "  ${3:// code here}",
      "};"
    ],
    "description": "arrow function"
  },
  "JavaScript Arrow (implicit)": {
    "prefix": "off:arrow-imp",
    "body": ["const ${1:name} = (${2:params}) => ${3:expr};"],
    "description": "arrow implicit return"
  },
  "JavaScript Arrow Async": {
    "prefix": "off:arrow-async",
    "body": [
      "const ${1:functionName} = async (${2:params}) => {",
      "  ${3:// await ...}",
      "};"
    ],
    "description": "arrow async"
  },

  "JavaScript Object (rich)": {
    "prefix": "off:object",
    "body": [
      "const ${1:objectName} = {",
      "  ${2:key1}: ${3:value1},",
      "  ${4:method}(${5:args}) { ${6:// ...} },",
      "  ['${7:computed}']: ${8:value},",
      "};"
    ],
    "description": "object với method + computed key"
  },
  "Object Spread": {
    "prefix": "off:object-spread",
    "body": ["const ${1:newObj} = { ...${2:base}, ${3:key}: ${4:value} };"],
    "description": "Tạo object mới bất biến"
  },

  "JavaScript Array": {
    "prefix": "off:array",
    "body": [
      "const ${1:items} = [",
      "  ${2:item1},",
      "  ${3:item2},",
      "  ${4:item3}",
      "];"
    ],
    "description": "array cơ bản"
  },
  "JavaScript Array of Objects": {
    "prefix": "off:array-object",
    "body": [
      "const ${1:list} = [",
      "  { id: ${2:1}, ${3:key}: ${4:value} },",
      "  { id: ${5:2}, ${6:key}: ${7:value} }",
      "];"
    ],
    "description": "mảng object cơ bản"
  },

  "Array Methods (thực chiến)": {
    "prefix": "off:arraymethods",
    "body": [
      "const ${1:items} = ${2:[1,2,3,4,5]};",
      "",
      "// map: biến đổi",
      "const mapped = ${1:items}.map(${3:x} => ${3:x} * 2);",
      "",
      "// filter: lọc",
      "const filtered = ${1:items}.filter(${3:x} => ${3:x} > 2);",
      "",
      "// reduce: tích lũy",
      "const sum = ${1:items}.reduce((acc, x) => acc + x, 0);",
      "",
      "// find / findIndex",
      "const found = ${1:items}.find(x => x === 3);",
      "const idx = ${1:items}.findIndex(x => x === 3);",
      "",
      "// some / every",
      "const anyOdd = ${1:items}.some(x => x % 2);",
      "const allPositive = ${1:items}.every(x => x > 0);",
      "",
      "// chain: map -> filter -> reduce",
      "const chained = ${1:items}",
      "  .map(x => x * 3)",
      "  .filter(x => x % 2 === 0)",
      "  .reduce((a, x) => a + x, 0);"
    ],
    "description": "map/filter/reduce/find/some/every + chain"
  },

  "Destructuring (advanced)": {
    "prefix": "off:destructuring",
    "body": [
      "const ${1:user} = { id: 1, name: 'Trung', age: 30 };",
      "const { name: ${2:username}, age = ${3:18}, ...${4:rest} } = ${1:user};",
      "",
      "const ${5:arr} = [1, 2, 3, 4];",
      "const [${6:first}, , ${7:third}, ...${8:tail}] = ${5:arr};"
    ],
    "description": "đổi tên, default, rest"
  },

  "Template Literal": {
    "prefix": "off:template",
    "body": ["`Hello, ${1:name}!`"],
    "description": "template literal đơn giản"
  },

  "Ternary Operator": {
    "prefix": "off:ternary",
    "body": ["${1:condition} ? ${2:valueIfTrue} : ${3:valueIfFalse}"],
    "description": "toán tử 3 ngôi"
  },
  "Nullish Coalescing": {
    "prefix": "off:nullish",
    "body": ["${1:value} ?? ${2:defaultValue}"],
    "description": "?? khi null/undefined"
  },
  "Optional Chaining": {
    "prefix": "off:optional",
    "body": ["${1:obj}?.${2:prop}?.(${3:args})"],
    "description": "?. an toàn"
  },

  "Try/Catch/Finally": {
    "prefix": "off:try",
    "body": [
      "try {",
      "  ${1:// code}",
      "} catch (${2:error}) {",
      "  console.error(${2:error});",
      "} finally {",
      "  ${3:// cleanup}",
      "}"
    ],
    "description": "khối try/catch/finally"
  }
}
