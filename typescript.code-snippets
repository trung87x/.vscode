{
  "TS Type Generic": {
    "prefix": "off:type",
    "body": [
      "export type ${1:TypeName}<T = any> = {",
      "  ${2:property1}: ${3:string};",
      "  ${4:property2}?: ${5:number};",
      "};"
    ],
    "description": "Tạo type với generic"
  },
  "TS Interface": {
    "prefix": "off:interface",
    "body": [
      "interface ${1:User} extends ${2:BaseType} {",
      "  ${3:name}: string;",
      "  ${4:email}: string;",
      "}"
    ],
    "description": "Tạo interface, có thể extends"
  },
  "TS Function Type": {
    "prefix": "off:function",
    "body": [
      "const ${1:sum} = (${2:a}: ${3:number}, ${4:b}: ${3}): ${3} => {",
      "  return ${2:a} + ${4:b};",
      "};"
    ],
    "description": "Hàm có kiểu tham số và trả về"
  },
  "TS Union Type": {
    "prefix": "off:union",
    "body": ["type ${1:UserRole} = 'admin' | 'editor' | 'viewer';"],
    "description": "Tạo union type"
  },
  "TS Generic Function": {
    "prefix": "off:generic",
    "body": [
      "function ${1:identity}<T = any>(${2:value}: T): T {",
      "  return ${2:value};",
      "}"
    ],
    "description": "Tạo hàm generic đơn giản"
  },
  "TS Type Assertion": {
    "prefix": "off:assert",
    "body": [
      "const ${1:data} = ${2:response} as ${3:User};",
      "// hoặc:",
      "const ${4:obj} = { foo: 'bar' } as const;"
    ],
    "description": "Ép kiểu hoặc dùng as const"
  },
  "TS Readonly Property": {
    "prefix": "off:readonly",
    "body": [
      "interface ${1:User} {",
      "  readonly ${2:id}: string;",
      "  ${3:name}: string;",
      "}",
      "// Hoặc dùng type:",
      "// type ${4:UserType} = Readonly<{ ${2:id}: string; ${3:name}: string }>"
    ],
    "description": "Readonly trong interface hoặc type"
  },
  "TS Mapped Type": {
    "prefix": "off:mapped",
    "body": ["type ${1:PartialType}<T> = {", "  [K in keyof T]?: T[K];", "};"],
    "description": "Tạo mapped type"
  },
  "TS Enum": {
    "prefix": "off:enum",
    "body": [
      "enum ${1:Status} {",
      "  ${2:Active} = 'active',",
      "  ${3:Inactive} = 'inactive'",
      "}"
    ],
    "description": "Tạo enum"
  },
  "TS Utility Partial": {
    "prefix": "off:partial",
    "body": ["type ${1:PartialUser} = Partial<${2:User}>;"],
    "description": "Dùng utility type Partial"
  }
}
